import { integrations, LDEvaluationDetail, LDLogger } from '@launchdarkly/node-server-sdk';
/**
 * Options which allow configuring the tracing hook.
 */
export interface TracingHookOptions {
    /**
     * Experimental: If set to true, then the tracing hook will add spans for each variation
     * method call. Span events are always added and are unaffected by this
     * setting.
     *
     * The default value is false.
     *
     * This feature is experimental and the data in the spans, or nesting of spans,
     * could change in future versions.
     */
    spans?: boolean;
    /**
     * If set to true, then the tracing hook will add the evaluated flag value
     * to span events and spans.
     *
     * The default is false.
     *
     * @deprecated This option is deprecated and will be removed in a future version.
     * This has been replaced by `includeValue`. If both are set, `includeValue` will take precedence.
     */
    includeVariant?: boolean;
    /**
     * If set to true, then the tracing hook will add the evaluated flag value
     * to span events and spans.
     *
     * The default is false.
     */
    includeValue?: boolean;
    /**
     * Set to use a custom logging configuration, otherwise the logging will be done
     * using `console`.
     */
    logger?: LDLogger;
    environmentId?: string;
}
/**
 * The TracingHook adds OpenTelemetry support to the LaunchDarkly SDK.
 *
 * By default, span events will be added for each call to a "Variation" method.
 *
 * The span event will include the canonicalKey of the context, the provider of the evaluation
 * (LaunchDarkly), and the key of the flag being evaluated.
 */
export default class TracingHook implements integrations.Hook {
    private readonly _options;
    private readonly _tracer;
    /**
     * Construct a TracingHook with the given options.
     *
     * @param options Options to customize tracing behavior.
     */
    constructor(options?: TracingHookOptions);
    /**
     * Get the meta-data for the tracing hook.
     */
    getMetadata(): integrations.HookMetadata;
    /**
     * Implements the "beforeEvaluation" stage of the TracingHook.
     */
    beforeEvaluation?(hookContext: integrations.EvaluationSeriesContext, data: integrations.EvaluationSeriesData): integrations.EvaluationSeriesData;
    /**
     * Implements the "afterEvaluation" stage of the TracingHook.
     */
    afterEvaluation?(hookContext: integrations.EvaluationSeriesContext, data: integrations.EvaluationSeriesData, detail: LDEvaluationDetail): integrations.EvaluationSeriesData;
}
//# sourceMappingURL=TracingHook.d.ts.map