import { Attributes, Context, Span as OtelSpan, SpanOptions } from '@opentelemetry/api';
import { NodeSDK } from '@opentelemetry/sdk-node';
import { NodeOptions } from '../api/Options.js';
import { Metric } from '../api/Metric.js';
import { RequestContext } from '../api/RequestContext.js';
import { Headers, IncomingHttpHeaders } from '../api/headers.js';
export declare const HIGHLIGHT_REQUEST_HEADER = "x-highlight-request";
export declare class ObservabilityClient {
    readonly FLUSH_TIMEOUT_MS: number;
    _projectID: string;
    _debug: boolean;
    otel: NodeSDK;
    private readonly backendUrl;
    private readonly tracer;
    private readonly logger;
    private readonly meter;
    private readonly processor;
    private readonly loggerProvider;
    private readonly metricsReader;
    private readonly _gauges;
    private readonly _counters;
    private readonly _histograms;
    private readonly _up_down_counters;
    constructor(sdkKey: string, options?: NodeOptions);
    private _getSamplingConfig;
    stop(): Promise<void>;
    _log(...data: any[]): void;
    recordMetric(metric: Metric): void;
    recordCount(metric: Metric): void;
    recordIncr(metric: Omit<Metric, 'value'>): void;
    recordHistogram(metric: Metric): void;
    recordUpDownCounter(metric: Metric): void;
    log(date: Date, msg: string, level: string, stack: object, secureSessionId?: string, requestId?: string, metadata?: Attributes): void;
    consumeCustomError(error: Error, secureSessionId: string | undefined, requestId: string | undefined, metadata?: Attributes, options?: {
        span: OtelSpan;
    }): void;
    flush(): Promise<void>;
    setAttributes(attributes: Attributes): void;
    parseHeaders(headers: Headers | IncomingHttpHeaders): RequestContext;
    runWithHeaders<T>(name: string, headers: Headers | IncomingHttpHeaders, cb: (span: OtelSpan) => T | Promise<T>, options?: SpanOptions): Promise<T>;
    startWithHeaders<T>(spanName: string, headers: Headers | IncomingHttpHeaders, options?: SpanOptions): {
        span: OtelSpan;
        ctx: Context;
    };
}
//# sourceMappingURL=ObservabilityClient.d.ts.map