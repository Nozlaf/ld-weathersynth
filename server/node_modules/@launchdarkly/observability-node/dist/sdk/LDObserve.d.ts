import { Attributes, Span as OtelSpan, SpanOptions } from '@opentelemetry/api';
import { ObservabilityClient } from '../client/ObservabilityClient';
import { RequestContext } from '../api/RequestContext';
import { Observe } from '../api/Observe';
import { Metric } from '../api/Metric';
import { Headers, IncomingHttpHeaders } from '../api/headers';
declare const _LDObserve: {
    _init(client: ObservabilityClient): void;
    isInitialized: () => boolean;
    stop: () => Promise<void>;
    recordError: (error: Error, secureSessionId?: string, requestId?: string, metadata?: Attributes, options?: {
        span: OtelSpan;
    }) => void;
    recordMetric: (metric: Metric) => void;
    recordCount: (metric: Metric) => void;
    recordIncr: (metric: Metric) => void;
    recordHistogram: (metric: Metric) => void;
    recordUpDownCounter: (metric: Metric) => void;
    flush: () => Promise<void>;
    recordLog: (message: any, level: string, secureSessionId?: string | undefined, requestId?: string | undefined, metadata?: Attributes) => void;
    parseHeaders: (headers: Headers | IncomingHttpHeaders) => RequestContext;
    runWithHeaders: (name: string, headers: Headers | IncomingHttpHeaders, cb: (span: OtelSpan) => any, options?: SpanOptions) => Promise<any>;
    startWithHeaders: (spanName: string, headers: Headers | IncomingHttpHeaders, options?: SpanOptions) => {
        span: OtelSpan;
        ctx: import("@opentelemetry/api").Context;
    };
    setAttributes: (attributes: Attributes) => void;
    _debug: (...data: any[]) => void;
};
declare const LDObserve: Observe;
export { LDObserve, _LDObserve };
//# sourceMappingURL=LDObserve.d.ts.map