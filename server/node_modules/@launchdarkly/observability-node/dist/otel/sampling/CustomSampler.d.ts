import { ReadableSpan } from '@opentelemetry/sdk-trace-base';
import { ExportSampler, SamplingResult } from './ExportSampler';
import { SamplingConfig, Maybe } from '../../graph/generated/graphql';
import { ReadableLogRecord } from '@opentelemetry/sdk-logs';
/**
 * Determine if an item should be sampled based on the sampling ratio.
 *
 * This function is not used for any purpose requiring cryptographic security.
 *
 * @param ratio The sampling ratio.
 * @returns True if the item should be sampled, false otherwise.
 */
export declare function defaultSampler(ratio: number): boolean;
/**
 * Custom sampler that uses a sampling configuration to determine if a span should be sampled.
 */
export declare class CustomSampler implements ExportSampler {
    private readonly sampler;
    private regexCache;
    private config;
    /**
     * @param config The sampling configuration.
     * @param sampler The sampler to use. This is intended to be used for testing purposes.
     */
    constructor(sampler?: (ratio: number) => boolean);
    setConfig(config?: Maybe<SamplingConfig>): void;
    isSamplingEnabled(): boolean;
    /**
     * Check if a value matches a match config.
     */
    private matchesValue;
    /**
     * Check if the attributes match the attribute configs.
     */
    private matchesAttributes;
    private matchEvent;
    private matchesEvents;
    /**
     * Attempts to match the span to the config. The span will match only if all defined conditions are met.
     *
     * @param config The config to match against.
     * @param name The name of the span to match.
     * @param attributes The attributes of the span to match.
     * @returns True if the span matches the config, false otherwise.
     */
    private matchesSpanConfig;
    private matchesLogConfig;
    /**
     * Sample a span based on the sampling configuration.
     *
     * @param configs The sampling configuration.
     * @param name The name of the span to sample.
     * @param attributes The attributes of the span to sample.
     * @returns The sampling result.
     */
    sampleSpan(span: ReadableSpan): SamplingResult;
    /**
     * Sample a log based on the sampling configuration.
     *
     * @param configs The sampling configuration.
     * @param attributes The attributes of the log to sample.
     * @returns The sampling result.
     */
    sampleLog(log: ReadableLogRecord): SamplingResult;
}
//# sourceMappingURL=CustomSampler.d.ts.map